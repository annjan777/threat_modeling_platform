import requests
import logging

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def scan_for_vulnerabilities(target):
    logging.info(f"Scanning {target} for vulnerabilities...")
    vulnerabilities = []

    try:
        response = requests.get(target, timeout=5)
        if "error" in response.text.lower():
            vulnerabilities.append("Potential error-based SQL Injection detected.")
        if "<script>" in response.text.lower():
            vulnerabilities.append("Potential XSS vulnerability detected.")

        logging.info(f"Found {len(vulnerabilities)} vulnerabilities.")
    except requests.RequestException as e:
        logging.error(f"Failed to scan {target}: {e}")
        return ["Scan failed due to request error."]

    return vulnerabilities

def check_sql_injection(target):
    logging.info(f"Checking {target} for SQL Injection vulnerabilities...")
    try:
        test_payload = "' OR '1'='1"
        response = requests.get(target, params={"input": test_payload}, timeout=5)
        if "logged in" in response.text.lower():
            return ["SQL Injection vulnerability found in login form."]
    except requests.RequestException as e:
        logging.error(f"SQL Injection check failed: {e}")
        return ["SQL Injection check failed."]
    
    return ["No SQL Injection vulnerabilities detected."]

def check_xss(target):
    logging.info(f"Checking {target} for XSS vulnerabilities...")
    try:
        test_payload = "<script>alert('XSS')</script>"
        response = requests.get(target, params={"input": test_payload}, timeout=5)
        if test_payload in response.text:
            return ["XSS vulnerability found in comment section."]
    except requests.RequestException as e:
        logging.error(f"XSS check failed: {e}")
        return ["XSS check failed."]

    return ["No XSS vulnerabilities detected."]
